import requests
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.utils.markdown import text, bold
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton


tg_bot_token = '5163185542:AAG96jJfS85lftHx4F1BBozDTJBLncC1h28'

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

page = 1
main_request = requests.get(f'https://rickandmortyapi.com/api/character?page'
                            f'={page}')
all_data = main_request.json()
characters_raw = all_data['results']
next_page_url = all_data['info']['next']
prev_page_url = all_data['info']['prev']
characters = {}
characters_names = []


inline_btn_1 = InlineKeyboardButton('–ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!',
                                        callback_data='button1')
inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)
inline_kb_full = InlineKeyboardMarkup(row_width=2).add(inline_btn_1)
inline_kb_full.add(
    InlineKeyboardButton('–í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞', callback_data='btn2'))
inline_btn_3 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 3', callback_data='btn3')
inline_btn_4 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 4', callback_data='btn4')
inline_btn_5 = InlineKeyboardButton('–∫–Ω–æ–ø–∫–∞ 5', callback_data='btn5')
inline_kb_full.add(inline_btn_3, inline_btn_4, inline_btn_5)
inline_kb_full.row(inline_btn_3, inline_btn_4, inline_btn_5)
inline_kb_full.insert(
    InlineKeyboardButton("query=''", switch_inline_query=''))
inline_kb_full.insert(
    InlineKeyboardButton("query='qwerty'", switch_inline_query='qwerty'))
inline_kb_full.insert(InlineKeyboardButton("Inline –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ",                                              switch_inline_query_current_chat='wasd'))
inline_kb_full.add(InlineKeyboardButton('–£—Ä–æ–∫–∏ aiogram',                     url='https://surik00.gitbooks.io/aiogram-lessons/content/'))

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer("Rick and Morty", reply_markup=inline_kb1)

@dp.callback_query_handler()
async def process_callback_button1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 2:
        await bot.answer_callback_query(callback_query.id,
                                        text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ',
            show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id,
                           f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')

@dp.message_handler(commands=['2'])
async def process_command_2(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=inline_kb_full)

# for name in characters_raw:
#     characters_names.append((name['name']))
# for id in characters_raw:
#     characters[id['id']] = id

executor.start_polling(dp)